Namespaces:
  =: io.murano.firewall
  std: io.murano
  res: io.murano.resources
  sys: io.murano.system
  vyatta: io.murano.contrib.vyatta


Name: Vyatta

Extends: std:Application

Properties:
  name:
    Contract: $.string().notNull()

  vyatta:
    Contract: $.class(vyatta:Api)
    Usage: Runtime

Workflow:
  initialize:
    Body:
      - $.environment: $.find(std:Environment).require()
      - $.vyatta: new(vyatta:Api)

  deploy:
    Body:
      - $.environment.reporter.report($this, 'Vyatta is ready to be configured')

  openPort:
    Arguments:
      instance:
        Contract: $.class(res:Instance).notNull()
      port:
        Contract: $.int().notNull()
    Body:
      - If: $instance.assignFloatingIp
        Then:
          - $host: $instance.floatingIpAddress
        Else:
          - $host: $instance.ipAddresses[0]
      - $.vyatta.openPort($instance.name, $host, $port)
      - $.environment.reporter.report($this, format('Opened port {1} for instance {0} on Vyatta', $instance.name, $port))
